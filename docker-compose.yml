version: '3'

services:
  application:
    build:
      context: "."
      dockerfile: "docker/application/Dockerfile"
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - "TwoGatherBackend/production.env"
    command: bash -c "py manage.py migrate && gunicorn TwoGatherBackend.wsgi -b 0.0.0.0 -w 4 --log-level debug --capture-output --access-logfile /var/log/gunicorn_access.log --error-logfile /var/log/gunicorn_error.log"
    volumes:
      - ./media:/usr/src/app/media
      - ./logs:/var/log
      - ./static:/static:ro
    restart: "always"

  nginx:
    image: "nginx:latest"
    restart: "always"
    volumes:
      - ./media:/usr/src/app/media 
      - ./static:/usr/src/app/static:ro
      - ./docker/nginx/default.conf/:/etc/nginx/conf.d/default.conf:ro
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'" # reinicia o nginx caso haja um novo certificado SSL
    depends_on:
      - application
    network_mode: "service:application"

  certbot:
    image: certbot/certbot
    restart: "always"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'" # verifica a cada 12h se h√° um novo certificado SSL